#!/usr/bin/env python3
"""
Script para solucionar problemas de compatibilidad de dependencias
Espec√≠ficamente para el error de Werkzeug/Flask
"""

import subprocess
import sys

def print_header(title):
    """Imprime un encabezado decorado"""
    print("\n" + "="*60)
    print(f"üîß {title}")
    print("="*60)

def fix_flask_werkzeug_compatibility():
    """Soluciona el problema de compatibilidad Flask/Werkzeug"""
    print_header("SOLUCIONANDO COMPATIBILIDAD FLASK/WERKZEUG")
    
    # Lista de comandos para solucionar el problema
    commands = [
        # Desinstalar versiones problem√°ticas
        [sys.executable, "-m", "pip", "uninstall", "-y", "Flask", "Werkzeug", "Flask-WTF", "WTForms"],
        
        # Instalar versiones espec√≠ficas compatibles
        [sys.executable, "-m", "pip", "install", "--user", "Flask==2.2.5"],
        [sys.executable, "-m", "pip", "install", "--user", "Werkzeug==2.2.3"],
        [sys.executable, "-m", "pip", "install", "--user", "Flask-WTF==1.1.1"],
        [sys.executable, "-m", "pip", "install", "--user", "WTForms==3.0.1"],
        
        # Instalar dependencias de base de datos
        [sys.executable, "-m", "pip", "install", "--user", "mysql-connector-python==8.1.0"],
        [sys.executable, "-m", "pip", "install", "--user", "SQLAlchemy==1.4.53"],
        [sys.executable, "-m", "pip", "install", "--user", "Flask-SQLAlchemy==3.0.5"],
        
        # Dependencias adicionales
        [sys.executable, "-m", "pip", "install", "--user", "python-dotenv==1.0.0"],
        [sys.executable, "-m", "pip", "install", "--user", "requests==2.31.0"]
    ]
    
    for i, cmd in enumerate(commands, 1):
        package_name = cmd[-1] if len(cmd) > 4 else "dependencias"
        print(f"\nüì¶ Paso {i}/{len(commands)}: {package_name}")
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
            
            if result.returncode == 0:
                print(f"‚úÖ Completado: {package_name}")
            else:
                print(f"‚ö†Ô∏è  Advertencia en {package_name}: {result.stderr}")
                
        except subprocess.TimeoutExpired:
            print(f"‚è∞ Timeout en {package_name}")
        except Exception as e:
            print(f"‚ùå Error en {package_name}: {e}")
    
    print("\n‚úÖ Proceso de compatibilidad completado")

def test_imports():
    """Prueba que las importaciones funcionen"""
    print_header("PROBANDO IMPORTACIONES")
    
    try:
        import flask
        print(f"‚úÖ Flask {flask.__version__} importado correctamente")
        
        import werkzeug
        print(f"‚úÖ Werkzeug {werkzeug.__version__} importado correctamente")
        
        from flask import Flask
        print("‚úÖ Flask.Flask importado correctamente")
        
        from flask_wtf import FlaskForm
        print("‚úÖ Flask-WTF importado correctamente")
        
        print("\nüéâ Todas las importaciones funcionan correctamente")
        return True
        
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def test_app_startup():
    """Prueba que la aplicaci√≥n pueda iniciarse"""
    print_header("PROBANDO INICIO DE APLICACI√ìN")
    
    try:
        import sys
        import os
        
        # Agregar path del proyecto
        project_root = os.getcwd()
        sys.path.insert(0, project_root)
        
        # Importar configuraci√≥n
        from config.config import config
        print("‚úÖ Configuraci√≥n importada")
        
        # Importar modelos
        from src.data.models import db
        print("‚úÖ Modelos importados")
        
        # Importar aplicaci√≥n
        from src.presentation.app import create_app
        print("‚úÖ Aplicaci√≥n importada")
        
        # Crear aplicaci√≥n de prueba
        app = create_app('development')
        print("‚úÖ Aplicaci√≥n creada exitosamente")
        
        print("\nüéâ La aplicaci√≥n est√° lista para ejecutarse")
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print_header("SOLUCIONADOR DE COMPATIBILIDAD - COMPARADOR DE PROTE√çNAS")
    
    # Solucionar compatibilidad
    fix_flask_werkzeug_compatibility()
    
    # Probar importaciones
    if test_imports():
        print("‚úÖ Importaciones OK")
    else:
        print("‚ùå Problemas con importaciones")
        return
    
    # Probar aplicaci√≥n
    if test_app_startup():
        print("‚úÖ Aplicaci√≥n OK")
    else:
        print("‚ùå Problemas con la aplicaci√≥n")
        return
    
    # Instrucciones finales
    print_header("üéâ PROBLEMA SOLUCIONADO")
    print("‚úÖ Compatibilidad de dependencias corregida")
    print("‚úÖ Aplicaci√≥n lista para ejecutar")
    print("\nAhora puedes ejecutar:")
    print("   python app.py")
    print("\nO:")
    print("   python run_app.py")
    print("\n" + "="*60)

if __name__ == '__main__':
    main()
