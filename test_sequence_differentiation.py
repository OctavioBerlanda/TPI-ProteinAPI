#!/usr/bin/env python3
"""
Test script para verificar que las secuencias diferentes dan resultados diferentes
despu√©s de las correcciones al sistema de detecci√≥n de AlphaFold
"""
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.business.alphafold_service import AlphaFoldService

def test_sequence_differentiation():
    """Prueba que secuencias diferentes produzcan resultados diferentes"""
    
    print("üß™ Test de Diferenciaci√≥n de Secuencias")
    print("=" * 60)
    
    # Configuraci√≥n b√°sica
    config = {
        'MODELS_DIRECTORY': 'models/test',
        'API_TIMEOUT': 30
    }
    
    service = AlphaFoldService(config)
    
    # Casos de prueba: secuencias similares pero diferentes
    test_cases = [
        {
            'name': 'Secuencias con 1 mutaci√≥n',
            'original': 'MVHLTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKYH',
            'mutated':  'MVHLTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKYG'  # Y->G al final
        },
        {
            'name': 'Secuencias cortas con 1 mutaci√≥n',
            'original': 'MKLLLLLLLLLLLLLLLLLLLLA',
            'mutated':  'MKLLLLLLLLLLLLLLLLLLLLG'  # A->G al final
        },
        {
            'name': 'Secuencias medias con m√∫ltiples diferencias',
            'original': 'MKALIVLGLVLLSVTVQGKVFERCELARTLKRLGMDGYRGISLANWMCLAKWESGYNTRATNYNAGDRSTDYGIFQINSRYWCNDGKTPGAVNACHLSCSALLQDNIADAVACAKRVVRDPQGIRAWVAWRNRCQNRDVRQYVQGCGV',
            'mutated':  'MKALIVLGLVLLSVTVQGKVFERCELARTLKRLGMDGYRGISLANWMCLAKWESGYNTRATNYNAGDRSTDYGIFQINSRYWCNDGKTPGAVNACHLSCSALLQDNIADAVACAKRVVRDPQGIRAWVAWRNRCQNRDVRQYVQGCGA'  # V->A al final
        }
    ]
    
    all_tests_passed = True
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìã Caso de Prueba {i}: {test_case['name']}")
        print("-" * 50)
        
        try:
            # Predecir estructura para secuencia original
            print("üî¨ Analizando secuencia original...")
            original_result = service.predict_structure(test_case['original'], f"test_original_{i}")
            
            # Predecir estructura para secuencia mutada
            print("üî¨ Analizando secuencia mutada...")
            mutated_result = service.predict_structure(test_case['mutated'], f"test_mutated_{i}")
            
            # Mostrar resultados
            print(f"\nüìä Resultados:")
            print(f"   Original - Confianza: {original_result['confidence']:.2f}%, M√©todo: {original_result['prediction_method']}")
            print(f"   Mutada   - Confianza: {mutated_result['confidence']:.2f}%, M√©todo: {mutated_result['prediction_method']}")
            
            # Verificar que los resultados son diferentes
            confidence_diff = abs(original_result['confidence'] - mutated_result['confidence'])
            methods_different = original_result['prediction_method'] != mutated_result['prediction_method']
            
            if confidence_diff > 0.1 or methods_different:
                print(f"   ‚úÖ DIFERENCIAS DETECTADAS:")
                print(f"      - Diferencia de confianza: {confidence_diff:.2f}%")
                if methods_different:
                    print(f"      - M√©todos diferentes detectados")
            else:
                print(f"   ‚ùå NO SE DETECTARON DIFERENCIAS SIGNIFICATIVAS")
                all_tests_passed = False
            
            # Comparar estructuras
            comparison = service.compare_structures(original_result, mutated_result)
            print(f"   üìê RMSD estimado: {comparison['rmsd_value']:.3f} √Ö")
            print(f"   üîÑ Diferencia de confianza: {comparison['confidence_difference']:.2f}%")
            
        except Exception as e:
            print(f"   ‚ùå ERROR en prueba: {str(e)}")
            all_tests_passed = False
    
    print("\n" + "=" * 60)
    if all_tests_passed:
        print("üéâ TODAS LAS PRUEBAS PASARON - El sistema diferencia correctamente entre secuencias")
    else:
        print("‚ö†Ô∏è ALGUNAS PRUEBAS FALLARON - Revisar la l√≥gica de diferenciaci√≥n")
    print("=" * 60)
    
    return all_tests_passed

def test_exact_sequence_detection():
    """Prueba la detecci√≥n de secuencias exactas conocidas"""
    
    print("\nüîç Test de Detecci√≥n de Secuencias Conocidas")
    print("=" * 60)
    
    config = {
        'MODELS_DIRECTORY': 'models/test',
        'API_TIMEOUT': 30
    }
    
    service = AlphaFoldService(config)
    
    # Secuencia exacta de hemoglobina beta humana
    known_sequence = 'MVHLTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKYH'
    
    print("üß¨ Probando secuencia exacta de hemoglobina beta...")
    result = service.predict_structure(known_sequence, "hemoglobin_test")
    
    print(f"üìä Resultado:")
    print(f"   M√©todo: {result['prediction_method']}")
    print(f"   Confianza: {result['confidence']:.2f}%")
    print(f"   URL del modelo: {result.get('model_url', 'No disponible')}")
    
    if result['prediction_method'] == 'alphafold_db_real':
        print("   ‚úÖ ESTRUCTURA REAL DETECTADA CORRECTAMENTE")
        return True
    else:
        print("   ‚ö†Ô∏è No se detect√≥ como estructura real (puede ser normal si no hay conectividad)")
        return True  # No es error si no hay internet

if __name__ == "__main__":
    print("üöÄ Iniciando tests de correcci√≥n del sistema AlphaFold")
    
    # Ejecutar tests
    test1_passed = test_sequence_differentiation()
    test2_passed = test_exact_sequence_detection()
    
    print(f"\nüìã RESUMEN DE TESTS:")
    print(f"   Test de diferenciaci√≥n: {'‚úÖ PAS√ì' if test1_passed else '‚ùå FALL√ì'}")
    print(f"   Test de detecci√≥n: {'‚úÖ PAS√ì' if test2_passed else '‚ùå FALL√ì'}")
    
    if test1_passed and test2_passed:
        print("\nüéØ TODOS LOS TESTS PASARON - El sistema est√° funcionando correctamente")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è ALGUNOS TESTS FALLARON - Se requiere revisi√≥n adicional")
        sys.exit(1)
