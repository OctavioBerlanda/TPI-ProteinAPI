#!/usr/bin/env python3
"""
Script simplificado de instalaci√≥n para el Comparador de Prote√≠nas
Soluciona problemas de instalaci√≥n en Windows
"""

import os
import sys
import subprocess

def print_header(title):
    """Imprime un encabezado decorado"""
    print("\n" + "="*60)
    print(f"üß¨ {title}")
    print("="*60)

def check_python_version():
    """Verifica la versi√≥n de Python"""
    print_header("VERIFICANDO VERSI√ìN DE PYTHON")
    
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 11):
        print("‚ùå Se requiere Python 3.11 o superior")
        print(f"   Versi√≥n actual: {version.major}.{version.minor}.{version.micro}")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
    return True

def install_requirements_step_by_step():
    """Instala las dependencias paso a paso para evitar errores"""
    print_header("INSTALANDO DEPENDENCIAS ESENCIALES")
    
    # Lista de paquetes esenciales en orden de instalaci√≥n
    essential_packages = [
        "python-dotenv==1.0.0",
        "Flask==2.3.3", 
        "WTForms==3.0.1",
        "Flask-WTF==1.1.1",
        "SQLAlchemy==2.0.21",
        "Flask-SQLAlchemy==3.0.5",
        "mysql-connector-python==8.1.0",
        "requests==2.31.0"
    ]
    
    failed_packages = []
    
    for package in essential_packages:
        print(f"\nüì¶ Instalando {package}...")
        try:
            result = subprocess.run([
                sys.executable, "-m", "pip", "install", "--user", package
            ], capture_output=True, text=True, timeout=120)
            
            if result.returncode == 0:
                print(f"‚úÖ {package} instalado correctamente")
            else:
                print(f"‚ùå Error instalando {package}")
                print(f"   Error: {result.stderr}")
                failed_packages.append(package)
                
        except subprocess.TimeoutExpired:
            print(f"‚è∞ Timeout instalando {package}")
            failed_packages.append(package)
        except Exception as e:
            print(f"‚ùå Error inesperado instalando {package}: {e}")
            failed_packages.append(package)
    
    if failed_packages:
        print(f"\n‚ö†Ô∏è  Paquetes que fallaron: {', '.join(failed_packages)}")
        print("Puedes intentar instalarlos manualmente despu√©s.")
        return len(failed_packages) == 0
    else:
        print("\n‚úÖ Todas las dependencias esenciales instaladas")
        return True

def check_env_file():
    """Verifica que existe el archivo .env"""
    print_header("VERIFICANDO CONFIGURACI√ìN")
    
    if not os.path.exists('.env'):
        print("‚ùå Archivo .env no encontrado")
        print("   Crea el archivo .env con la configuraci√≥n de la base de datos")
        return False, {}
    
    print("‚úÖ Archivo .env encontrado")
    
    # Leer configuraci√≥n
    config = {}
    try:
        with open('.env', 'r') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    config[key] = value
    except Exception as e:
        print(f"‚ùå Error leyendo .env: {e}")
        return False, {}
    
    required_keys = ['DB_HOST', 'DB_PORT', 'DB_NAME', 'DB_USER', 'DB_PASSWORD']
    missing_keys = [key for key in required_keys if key not in config]
    
    if missing_keys:
        print(f"‚ùå Faltan configuraciones en .env: {', '.join(missing_keys)}")
        return False, {}
    
    print("‚úÖ Configuraci√≥n .env completa")
    return True, config

def run_basic_tests():
    """Ejecuta tests b√°sicos sin dependencias problem√°ticas"""
    print_header("EJECUTANDO TESTS B√ÅSICOS")
    
    try:
        # Verificar que podemos importar nuestros m√≥dulos
        sys.path.insert(0, os.path.join(os.getcwd(), 'src'))
        
        from business.sequence_service import SequenceValidator, SequenceComparisonService
        print("‚úÖ M√≥dulos de negocio importados correctamente")
        
        # Test b√°sico de validaci√≥n
        validator = SequenceValidator()
        valid, invalid = validator.validate_amino_acids("ARNDCQ")
        
        if valid and len(invalid) == 0:
            print("‚úÖ Validaci√≥n de amino√°cidos funcionando")
        else:
            print("‚ùå Error en validaci√≥n de amino√°cidos")
            return False
        
        # Test b√°sico de comparaci√≥n
        service = SequenceComparisonService()
        result = service.validate_and_compare_sequences("ARNDCQ", "GRNDCQ")
        
        if result['valid'] and result['mutations']['total_mutations'] == 1:
            print("‚úÖ Comparaci√≥n de secuencias funcionando")
        else:
            print("‚ùå Error en comparaci√≥n de secuencias")
            return False
        
        print("‚úÖ Todos los tests b√°sicos pasaron")
        return True
        
    except ImportError as e:
        print(f"‚ùå Error importando m√≥dulos: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error en tests: {e}")
        return False

def create_run_script():
    """Crea un script simple para ejecutar la aplicaci√≥n"""
    print_header("CREANDO SCRIPT DE EJECUCI√ìN")
    
    run_script_content = '''#!/usr/bin/env python3
"""
Script para ejecutar el Comparador de Prote√≠nas
"""
import sys
import os

# Agregar src al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

if __name__ == '__main__':
    try:
        from presentation.app import create_app
        
        print("üöÄ Iniciando Comparador de Prote√≠nas...")
        print("üìç URL: http://localhost:5000")
        print("‚èπÔ∏è  Presiona Ctrl+C para detener")
        
        app = create_app('development')
        app.run(debug=True, host='0.0.0.0', port=5000)
        
    except ImportError as e:
        print(f"‚ùå Error importando la aplicaci√≥n: {e}")
        print("   Verifica que las dependencias est√©n instaladas")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Error ejecutando la aplicaci√≥n: {e}")
        sys.exit(1)
'''
    
    try:
        with open('run_app.py', 'w') as f:
            f.write(run_script_content)
        print("‚úÖ Script 'run_app.py' creado")
        return True
    except Exception as e:
        print(f"‚ùå Error creando script: {e}")
        return False

def main():
    """Funci√≥n principal simplificada"""
    print_header("INSTALACI√ìN SIMPLIFICADA - COMPARADOR DE PROTE√çNAS")
    
    # Verificar Python
    if not check_python_version():
        sys.exit(1)
    
    # Instalar dependencias paso a paso
    if not install_requirements_step_by_step():
        print("\n‚ö†Ô∏è  Algunas dependencias fallaron, pero puedes continuar")
        print("   Intenta instalar manualmente las que fallaron")
    
    # Verificar configuraci√≥n
    env_ok, config = check_env_file()
    if not env_ok:
        print("\n‚ö†Ô∏è  Configura el archivo .env antes de continuar")
    
    # Ejecutar tests b√°sicos
    if run_basic_tests():
        print("‚úÖ Sistema b√°sico funcionando correctamente")
    else:
        print("‚ö†Ô∏è  Algunos tests fallaron, revisa las dependencias")
    
    # Crear script de ejecuci√≥n
    create_run_script()
    
    # Instrucciones finales
    print_header("üéâ INSTALACI√ìN COMPLETADA")
    print("‚úÖ Instalaci√≥n b√°sica completa")
    print("\nPara continuar:")
    print("1. Configura MySQL y crea la base de datos:")
    print("   CREATE DATABASE protein_comparison_db;")
    print("\n2. Ejecuta la aplicaci√≥n:")
    print("   python app.py")
    print("\n3. Abre tu navegador en: http://localhost:5000")
    print("\nüí° Tip: Si hay errores de importaci√≥n, ejecuta desde el directorio ra√≠z")
    print("" + "="*60)

if __name__ == '__main__':
    main()
