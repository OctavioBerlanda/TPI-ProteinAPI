#!/usr/bin/env python3
"""
Script para ejecutar todos los tests del proyecto
Comparador de Prote√≠nas - Tests de Reglas de Negocio
"""

import unittest
import sys
import os

# Agregar el directorio ra√≠z al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

def run_all_tests():
    """Ejecuta todos los tests del proyecto"""
    
    print("="*60)
    print("üß™ EJECUTANDO TESTS DE REGLAS DE NEGOCIO")
    print("="*60)
    
    # Descubrir y ejecutar todos los tests
    test_dir = os.path.dirname(__file__)
    loader = unittest.TestLoader()
    suite = loader.discover(test_dir, pattern='test_*.py')
    
    # Ejecutar tests con verbosidad alta
    runner = unittest.TextTestRunner(verbosity=2, buffer=True)
    result = runner.run(suite)
    
    print("\n" + "="*60)
    print("üìä RESUMEN DE RESULTADOS")
    print("="*60)
    
    print(f"Tests ejecutados: {result.testsRun}")
    print(f"Errores: {len(result.errors)}")
    print(f"Fallos: {len(result.failures)}")
    print(f"Omitidos: {len(result.skipped)}")
    
    if result.errors:
        print("\n‚ùå ERRORES:")
        for test, error in result.errors:
            print(f"  - {test}: {error}")
    
    if result.failures:
        print("\n‚ùå FALLOS:")
        for test, failure in result.failures:
            print(f"  - {test}: {failure}")
    
    if result.wasSuccessful():
        print("\n‚úÖ TODOS LOS TESTS PASARON EXITOSAMENTE")
        print("‚úÖ TODAS LAS REGLAS DE NEGOCIO SE CUMPLEN CORRECTAMENTE")
    else:
        print("\n‚ùå ALGUNOS TESTS FALLARON")
        return False
    
    return True

def verify_business_rules():
    """Verifica que todas las reglas de negocio est√©n implementadas"""
    
    print("\n" + "="*60)
    print("üìã VERIFICACI√ìN DE REGLAS DE NEGOCIO IMPLEMENTADAS")
    print("="*60)
    
    business_rules = [
        "‚úÖ Validaci√≥n de amino√°cidos (solo los 20 est√°ndar)",
        "‚úÖ Validaci√≥n de longitud igual entre secuencias",
        "‚úÖ Validaci√≥n de m√°ximo 2 mutaciones",
        "‚úÖ Validaci√≥n de m√≠nimo 1 diferencia (no secuencias id√©nticas)",
        "‚úÖ Limpieza autom√°tica de secuencias (espacios, may√∫sculas)",
        "‚úÖ Detecci√≥n y descripci√≥n de mutaciones",
        "‚úÖ Almacenamiento en base de datos MySQL",
        "‚úÖ Gesti√≥n de usuarios y comparaciones",
        "‚úÖ Arquitectura en 3 capas (Presentaci√≥n, Negocio, Datos)",
    ]
    
    for rule in business_rules:
        print(rule)
    
    print("\n‚úÖ TODAS LAS REGLAS DE NEGOCIO EST√ÅN IMPLEMENTADAS Y TESTADAS")

if __name__ == '__main__':
    success = run_all_tests()
    verify_business_rules()
    
    print("\n" + "="*60)
    print("üöÄ PROYECTO LISTO PARA USO")
    print("="*60)
    print("Para ejecutar la aplicaci√≥n:")
    print("1. Configura la base de datos MySQL en .env")
    print("2. Instala dependencias: pip install -r requirements.txt")
    print("3. Ejecuta: python src/presentation/app.py")
    print("4. Abre: http://localhost:5000")
    
    sys.exit(0 if success else 1)
